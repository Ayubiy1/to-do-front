{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\\\u041D\\u043E\\u0432\\u0430\\u044F \\u043F\\u0430\\u043F\\u043A\\u0430\\\\to-do\\\\src\\\\components\\\\pages\\\\Lists.js\",\n  _s = $RefreshSig$();\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useParams } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { Card } from \"antd\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ListPage = () => {\n  _s();\n  var _lists$data;\n  const {\n    name\n  } = useParams();\n\n  // 1. Boardni name orqali topib, faqat _id ni qaytarish\n  const {\n    data: boardId,\n    isLoading: boardLoading\n  } = useQuery({\n    queryKey: [\"boardId\", name],\n    queryFn: async () => {\n      const res = await axios.get(`http://localhost:3000/api/boards`);\n      const board = res.data.find(b => b.name === name);\n      if (!board) throw new Error(\"Board topilmadi\");\n      return board._id; // faqat _id qaytadi\n    },\n    enabled: !!name\n  });\n\n  // 2. Board ID bo‘yicha listlarni olish\n  const {\n    data: lists,\n    isLoading: listsLoading,\n    error: listsError\n  } = useQuery({\n    queryKey: [\"lists\", boardId],\n    queryFn: async () => {\n      const res = await axios.get(\"http://localhost:3000/api/lists\");\n\n      // Agar backend array qaytarsa\n      const filtered = res.data.filter(list => list.boardId === boardId);\n      return filtered;\n    },\n    enabled: !!boardId // boardId bo‘lmasa query ishlamaydi\n  });\n\n  //   const {\n  //     data: lists,\n  //     isLoading: listsLoading,\n  //     error: listsError,\n  //   } = useQuery({\n  //     queryKey: [\"lists\", boardId],\n  //     queryFn: async () => {\n  //       const res = await axios.get(`http://localhost:3000/api/lists`);\n  //       console.log(res.data.find((b) => b.board == boardId));\n\n  //       return res.data.find((b) => b.board == boardId);\n  //     },\n  //     enabled: !!boardId, // faqat boardId mavjud bo‘lsa ishlaydi\n  //   });\n\n  console.log(lists);\n  if (boardLoading || listsLoading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 44\n  }, this);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: lists === null || lists === void 0 ? void 0 : (_lists$data = lists.data) === null || _lists$data === void 0 ? void 0 : _lists$data.map((list, index) => {\n      return /*#__PURE__*/_jsxDEV(Card, {\n        title: list.name,\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            color: \"black\"\n          },\n          children: list.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false);\n};\n_s(ListPage, \"05gzux9iRadSjJ0d401ux8wJ7SM=\", false, function () {\n  return [useParams, useQuery, useQuery];\n});\n_c = ListPage;\nexport default ListPage;\nvar _c;\n$RefreshReg$(_c, \"ListPage\");","map":{"version":3,"names":["useQuery","useParams","axios","Card","jsxDEV","_jsxDEV","Fragment","_Fragment","ListPage","_s","_lists$data","name","data","boardId","isLoading","boardLoading","queryKey","queryFn","res","get","board","find","b","Error","_id","enabled","lists","listsLoading","error","listsError","filtered","filter","list","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","map","index","title","style","color","_c","$RefreshReg$"],"sources":["C:/Users/user/Desktop/Новая папка/to-do/src/components/pages/Lists.js"],"sourcesContent":["import { useQuery } from \"@tanstack/react-query\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport { Card } from \"antd\";\r\n\r\nconst ListPage = () => {\r\n  const { name } = useParams();\r\n\r\n  // 1. Boardni name orqali topib, faqat _id ni qaytarish\r\n  const { data: boardId, isLoading: boardLoading } = useQuery({\r\n    queryKey: [\"boardId\", name],\r\n    queryFn: async () => {\r\n      const res = await axios.get(`http://localhost:3000/api/boards`);\r\n      const board = res.data.find((b) => b.name === name);\r\n      if (!board) throw new Error(\"Board topilmadi\");\r\n      return board._id; // faqat _id qaytadi\r\n    },\r\n    enabled: !!name,\r\n  });\r\n\r\n  // 2. Board ID bo‘yicha listlarni olish\r\n  const {\r\n    data: lists,\r\n    isLoading: listsLoading,\r\n    error: listsError,\r\n  } = useQuery({\r\n    queryKey: [\"lists\", boardId],\r\n    queryFn: async () => {\r\n      const res = await axios.get(\"http://localhost:3000/api/lists\");\r\n\r\n      // Agar backend array qaytarsa\r\n      const filtered = res.data.filter((list) => list.boardId === boardId);\r\n      return filtered;\r\n    },\r\n    enabled: !!boardId, // boardId bo‘lmasa query ishlamaydi\r\n  });\r\n\r\n  //   const {\r\n  //     data: lists,\r\n  //     isLoading: listsLoading,\r\n  //     error: listsError,\r\n  //   } = useQuery({\r\n  //     queryKey: [\"lists\", boardId],\r\n  //     queryFn: async () => {\r\n  //       const res = await axios.get(`http://localhost:3000/api/lists`);\r\n  //       console.log(res.data.find((b) => b.board == boardId));\r\n\r\n  //       return res.data.find((b) => b.board == boardId);\r\n  //     },\r\n  //     enabled: !!boardId, // faqat boardId mavjud bo‘lsa ishlaydi\r\n  //   });\r\n\r\n  console.log(lists);\r\n\r\n  if (boardLoading || listsLoading) return <p>Loading...</p>;\r\n\r\n  return (\r\n    <>\r\n      {lists?.data?.map((list, index) => {\r\n        return (\r\n          <Card key={index} title={list.name}>\r\n            <p style={{ color: \"black\" }}>{list.name}</p>\r\n          </Card>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ListPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}